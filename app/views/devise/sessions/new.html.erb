<% content_for(:body_class, "full-page") %>
<div class="login-page">
  <div class="container">
    <div class="row">
      <div class="col-xs-12 col-md-6 col-md-offset-3 text-center">
        <div class="sign-in text-center">
          <%= image_tag "logo.png", class: "logo"%>
           <h4><a id="sign-in-animation", href="" class="typewrite" data-period="2000" data-type='[ "L app la plus YaY du moment", "Gratuit et fun", "Yay yay et yay" ]'>
            </a></h4>
            <ul>
               <li>
                <%= image_tag "smiley4.png", class: "smiley sign-in-emoji" %>
              </li>
              <li>
                <%= image_tag "smiley5.png", class: "smiley sign-in-emoji sign-in-emoji-5" %>
              </li>
              <li>
                <%= image_tag "smiley6.png", class: "smiley sign-in-emoji sign-in-emoji-6" %>
              </li>
              <li>
                <%= image_tag "smiley7.png", class: "smiley sign-in-emoji sign-in-emoji-7" %>
              </li>
              <li>
                <%= image_tag "smiley8.png", class: "smiley sign-in-emoji sign-in-emoji-8" %>
              </li>
              <li>
                <%= image_tag "smiley9.png", class: "smiley sign-in-emoji sign-in-emoji-9" %>
              </li>
              <li>
                <%= image_tag "smiley10.png", class: "smiley sign-in-emoji sign-in-emoji-10" %>
              </li>
            </ul>
          <%= render "devise/shared/links" %>
        </div>
      </div>
    </div>
  </div>
</div>

<% content_for(:after_js) do %>
  <script>
      var TxtType = function(el, toRotate, period) {
        this.toRotate = toRotate;
        this.el = el;
        this.loopNum = 0;
        this.period = parseInt(period, 10) || 2000;
        this.txt = '';
        this.tick();
        this.isDeleting = false;
    };

    TxtType.prototype.tick = function() {
        var i = this.loopNum % this.toRotate.length;
        var fullTxt = this.toRotate[i];

        if (this.isDeleting) {
        this.txt = fullTxt.substring(0, this.txt.length - 1);
        } else {
        this.txt = fullTxt.substring(0, this.txt.length + 1);
        }

        this.el.innerHTML = '<span class="wrap">'+this.txt+'</span>';

        var that = this;
        var delta = 200 - Math.random() * 100;

        if (this.isDeleting) { delta /= 2; }

        if (!this.isDeleting && this.txt === fullTxt) {
        delta = this.period;
        this.isDeleting = true;
        } else if (this.isDeleting && this.txt === '') {
        this.isDeleting = false;
        this.loopNum++;
        delta = 500;
        }

        setTimeout(function() {
        that.tick();
        }, delta);
    };

    window.onload = function() {
        var elements = document.getElementsByClassName('typewrite');
        for (var i=0; i<elements.length; i++) {
            var toRotate = elements[i].getAttribute('data-type');
            var period = elements[i].getAttribute('data-period');
            if (toRotate) {
              new TxtType(elements[i], JSON.parse(toRotate), period);
            }
        }
    };

window.requestAnimationFrame = (function(){
return  window.requestAnimationFrame       ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame    ||
        function( callback ){
          window.setTimeout(callback, 1000 / 60);
        };
})();

var $parent= $(".full-page"),
$elements= $('.sign-in-emoji', $parent),
vertSpeed= 2,
horiSpeed= 2;

var height=$parent.height(),
    width=$parent.width();
    $parent.css("position", "relative")
    .css("overflow", "hidden");

// store all the data for animation
var items= [];
for(var i=0; i<$elements.length; i++){
    var $element= $($elements[i]),
    elementWidth= $element.width(),
    elementHeight= $element.height();

    $element.css("position", "absolute");

    var item= {
        element: $element[0],
        elementHeight: elementHeight,
        elementWidth: elementWidth,
        ySpeed: -vertSpeed,

        omega: 2*Math.PI* horiSpeed/(width*60), //omega= 2Pi*frequency
        random: (Math.random()/2+0.5) * i * 10000, //random time offset
        x: function(time){
            return (Math.sin(this.omega *(time+this.random)) + 1)/2 * (width-elementWidth);
        },
        y: height + (Math.random()+1)*i*elementHeight,
    }
    items.push(item);
}

var counter=0;
var animationStep= function(){ //called 60 times a second
  var time=+new Date(); //little trick, gives unix time in ms
  var check= (counter%10 === 0);

  for(var i=0; i<items.length; i++){
    var item= items[i];

    transformString= "translate3d("+item.x(time)+"px,"+item.y+"px,0px)";
    item.element.style.transform= transformString;
    item.element.style.webkitTransform= transformString;

    item.y += item.ySpeed;
    if(check && item.y < -item.elementHeight){ //check bounds every 10th iteration
        item.y= height;
    }
  }

  counter%=10;
  counter++;
  requestAnimationFrame(animationStep);
}

requestAnimationFrame(animationStep);

    </script>
<% end %>
